/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface GasTrapInterface extends Interface {
    getFunction(nameOrSignature: "armed" | "enter" | "loopCeil" | "owner" | "setArmed" | "setLoopCeil" | "setWhitelist" | "transferOwnership" | "whitelist"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ArmedSet" | "LoopCeilSet" | "OwnershipTransferred" | "Trapped" | "WhitelistSet"): EventFragment;

    encodeFunctionData(functionFragment: 'armed', values?: undefined): string;
encodeFunctionData(functionFragment: 'enter', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'loopCeil', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'setArmed', values: [boolean]): string;
encodeFunctionData(functionFragment: 'setLoopCeil', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setWhitelist', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'whitelist', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'armed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'enter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'loopCeil', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setArmed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setLoopCeil', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setWhitelist', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  }

  
    export namespace ArmedSetEvent {
      export type InputTuple = [armed: boolean];
      export type OutputTuple = [armed: boolean];
      export interface OutputObject {armed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoopCeilSetEvent {
      export type InputTuple = [loops: BigNumberish];
      export type OutputTuple = [loops: bigint];
      export interface OutputObject {loops: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike];
      export type OutputTuple = [from: string, to: string];
      export interface OutputObject {from: string, to: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TrappedEvent {
      export type InputTuple = [caller: AddressLike, loops: BigNumberish];
      export type OutputTuple = [caller: string, loops: bigint];
      export interface OutputObject {caller: string, loops: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WhitelistSetEvent {
      export type InputTuple = [account: AddressLike, allowed: boolean];
      export type OutputTuple = [account: string, allowed: boolean];
      export interface OutputObject {account: string, allowed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface GasTrap extends BaseContract {
    
    connect(runner?: ContractRunner | null): GasTrap;
    waitForDeployment(): Promise<this>;

    interface: GasTrapInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    armed: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    enter: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    loopCeil: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setArmed: TypedContractMethod<
      [_armed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setLoopCeil: TypedContractMethod<
      [_loopCeil: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setWhitelist: TypedContractMethod<
      [account: AddressLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    whitelist: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'armed'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'enter'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'loopCeil'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setArmed'): TypedContractMethod<
      [_armed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setLoopCeil'): TypedContractMethod<
      [_loopCeil: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setWhitelist'): TypedContractMethod<
      [account: AddressLike, allowed: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'whitelist'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'ArmedSet'): TypedContractEvent<ArmedSetEvent.InputTuple, ArmedSetEvent.OutputTuple, ArmedSetEvent.OutputObject>;
getEvent(key: 'LoopCeilSet'): TypedContractEvent<LoopCeilSetEvent.InputTuple, LoopCeilSetEvent.OutputTuple, LoopCeilSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Trapped'): TypedContractEvent<TrappedEvent.InputTuple, TrappedEvent.OutputTuple, TrappedEvent.OutputObject>;
getEvent(key: 'WhitelistSet'): TypedContractEvent<WhitelistSetEvent.InputTuple, WhitelistSetEvent.OutputTuple, WhitelistSetEvent.OutputObject>;

    filters: {
      
      'ArmedSet(bool)': TypedContractEvent<ArmedSetEvent.InputTuple, ArmedSetEvent.OutputTuple, ArmedSetEvent.OutputObject>;
      ArmedSet: TypedContractEvent<ArmedSetEvent.InputTuple, ArmedSetEvent.OutputTuple, ArmedSetEvent.OutputObject>;
    

      'LoopCeilSet(uint256)': TypedContractEvent<LoopCeilSetEvent.InputTuple, LoopCeilSetEvent.OutputTuple, LoopCeilSetEvent.OutputObject>;
      LoopCeilSet: TypedContractEvent<LoopCeilSetEvent.InputTuple, LoopCeilSetEvent.OutputTuple, LoopCeilSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Trapped(address,uint256)': TypedContractEvent<TrappedEvent.InputTuple, TrappedEvent.OutputTuple, TrappedEvent.OutputObject>;
      Trapped: TypedContractEvent<TrappedEvent.InputTuple, TrappedEvent.OutputTuple, TrappedEvent.OutputObject>;
    

      'WhitelistSet(address,bool)': TypedContractEvent<WhitelistSetEvent.InputTuple, WhitelistSetEvent.OutputTuple, WhitelistSetEvent.OutputObject>;
      WhitelistSet: TypedContractEvent<WhitelistSetEvent.InputTuple, WhitelistSetEvent.OutputTuple, WhitelistSetEvent.OutputObject>;
    
    };
  }